# 该workflow的名称，可以随意填写
name: Generate Tag

# workflow的触发事件，这里代表release分支的push事件触发
on:
  push:
    # 提交tag名以v开头的tag时执行部署任务
    tags:
      - 'v*'

# 任务
jobs:
  build:
    # 运行所需要的环境
    runs-on: ubuntu-latest

    steps:
      # 切换分支
      - name: Checkout
        uses: actions/checkout@v2
      # 下载 git submodule
      - uses: srt32/git-actions@v0.0.3
        with:
          args: git submodule update --init --recursive
      # 使用 node:14
      - name: use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: 14
      # 下载依赖
      - name: install
        run: |
          npm install
        env:
          CI: true
      # 构建
      - name: Build
        run: |
          npm run build
        env:
          CI: true
      # 生成压缩包
      - run: tar -zcvf release.tgz .nuxt  nuxt.config.ts package.json  pm2.config.json postbuild.ts config tsconfig.json yarn.lock

      # 发布 Release（创建Release分支）
      - name: Create Release
        id: create_release
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.HUB_TOKEN }}
        with:
          # 本次提交的tag的名称
          tag_name: ${{ github.ref }}
          # Release版本的名称
          release_name: Release ${{ github.ref }}
          # 是否是草稿
          draft: false
          # 是否是预发布
          prerelease: false

      # 上传构建结果（release.tgz）到 Release
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.HUB_TOKEN }}
        with:
          # 上传地址（创建的Release分支地址）
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          # 上传的文件
          asset_path: ./release.tgz
          # 上传后的文件名
          asset_name: release.tgz
          # 上传的文件类型
          asset_content_type: application/x-tgz
