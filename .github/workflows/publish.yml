# 该workflow的名称，可以随意填写
name: Publish And Deploy

# workflow的触发事件，这里代表release分支的push事件触发
on:
  push:
    branches: [main]

# 任务
jobs:
  build:
    # 运行所需要的环境
    runs-on: ubuntu-latest

    steps:
      # 切换分支
      - name: Checkout
        uses: actions/checkout@v2
      # 下载 git submodule
      - uses: srt32/git-actions@v0.0.3
        with:
          args: git submodule update --init --recursive
      # 使用 node:14
      - name: use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: 14
      # 下载依赖
      - name: install
        run: |
          npm install
        env:
          CI: true
      # 构建
      - name: Build
        run: |
          npm run build
        env:
          CI: true
      # 生成压缩包
      - run: tar -zcvf release.tgz .nuxt  nuxt.config.ts package.json  pm2.config.json postbuild.ts config tsconfig.json yarn.lock

      # 上传文件
      - name: Upload
        uses: easingthemes/ssh-deploy@v2.0.7
        env:
          SSH_PRIVATE_KEY: ${{ secrets.ACCESS_TOKEN }}
          ARGS: '-avz --delete'
          SOURCE: 'release.tgz'
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.TARGET }}

      # 部署
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.ACCESS_TOKEN }}
          # 远程服务器端口号
          port: ${{ secrets.PORT }}
          # 命令超时配置 默认10m
          command_timeout: 20m
          # 运行在远程服务器的命令
          # 1. 进入项目目录
          # 2. 下载发布包
          # 3. 解压缩发布包
          # 4. 安装生产环境依赖
          # 5. pm2运行配置文件
          script: |
            cd /www/wwwroot/web.90c.vip
            tar zxvf release.tgz
            npm install --production
            pm2 reload pm2.config.json
      # Setup Python
      - name: Setup Python
        uses: actions/setup-python@master
        with:
          python-version: 3.7
      - name: Generate coverage report
        run: |
          pip install pytest
          pip install pytest-cov
          pytest --cov=./ --cov-report=xml
      # 集成codecov
      - name: Upload coverage to Codecov
          uses: codecov/codecov-action@v1
          with:
            token: ${{ secrets.CODECOV_TOKEN }}
            file: ./coverage.xml
            files: ./coverage1.xml,./coverage2.xml
            directory: ./coverage/reports/
            flags: unittests
            env_vars: OS,PYTHON
            name: codecov-umbrella
            fail_ci_if_error: true
            path_to_write_report: ./coverage/codecov_report.txt
            verbose: true
      # 微信通知
      - name: Wechat Notification
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: chf007/action-wechat-work@master
        env:
          WECHAT_WORK_BOT_WEBHOOK: ${{ secrets.WECHAT_WEBHOOK }}
        with:
          msgtype: markdown
          content: "来画平台<font color=\"warning\">v5.2.3</font>更新了，快来试试看吧～。\n
          > \n
          ##### 修改内容：\n
          > ${{ github.event.head_commit.message }} \n
          ##### 修改分支:\n
          > ${{ github.event.ref }} \n
          ##### 修改时间:\n
          > ${{ github.event.head_commit.timestamp }} \n
          ##### 修改人:\n
          > ${{ github.event.head_commit.committer.name }}\n"
          mentioned_list: "['@all']"
